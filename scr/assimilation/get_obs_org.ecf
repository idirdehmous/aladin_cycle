#! /bin/bash
@manual
This task will retrieve the SYNOP observations necessary for Data Assimilation.
It accesses the operational BUFR file at /ec/vol/msbackup/ , which are copied
to a local directory before reading.

NOTE: those files are dynamic. If the task tries to copy them just at the moment they are being (re-)written,
there may be an error (e.g. "stale file handle"). In this case, re-running the task will normally work OK.

If it fails, first look at output.
  - is the operational BUFR file available in /ec/vol/msbackup ?
  - is there a problem with eccodes (bufr_copy) or the BUFR file (corrupted BUFR message)
  - is the working directory available (ws1 or ws2)

Final result should be files  <obstype>_${RUNDATE}00.bufr.

In case it is impossible to create the output BUFR file:
  - warn RMI asap
  - If all else fails, and there is no other way: set the whole assimilation family to complete. The Forecast family will then start. It will fail twice (missing analysis). But manually restarting a third time (ECF_TRYNO=3) it will continue by using the first guess (thus skipping assimilation alltogether).
# REALTIME DATA ,THE BUFR FILES DESSIMINATED BY ECMWF 
# CONTAIN THE FOLLOWING DATA TYPE ( dataCategory BUFR TABLE C13 )
# 
# 0,1 SURFACE DATA -LAND 
# SUBCATEGORY :/2/3/4/7/28/140/147/165/170/172/176/178
# 9   SURFACE DATA -SEA
# SUBCATEGORY :/11/12/13/14/19/21/22/23/180/181/182
# 2   UPPER AIR SOUNDING -NOT STELLITE 
# SUBCATEGORY :/92/95/96/97/101/102/103/104/105/106/107/109/111/112/113/230/231
# 4   SINGLE LEVEL UPPER AIR DATA -AMDAR , AIREP , MODE-S 
# SUBCATEGORY :141/142/143/144/145/146/149
# 31  OCEANOGRAPHIC DATA
@end
@include <@HPC_HEADER@>
@include <head.h>
@include <settings.h>
@include <@ENV_ALADIN@>

[ -d $d_OBS ] || mkdir -p $d_OBS
cd ${d_OBS}
#ofile=synop_${RUNDATE}00.bufr
#rm -f $ofile
rm -f *bufr 

OBS_PATH_REALTIME=/ec/vol/msbackup
OBS_PATH_ARCHIVE=/ec/scratch/cv6/OBS/$YYYY/$MM/$DD

if [[ $REALTIME == "yes" ]] ; then
  # get 6h obs files from /ec/vol/msbackup/
  case $RR in
    00|06|12|18)
    # just use the file for this instance
      filelist=BUFR0001${RUNDATE}.DAT
      ;;
    03|09|15|21)
    # at intermediate times, we combine two BUFR files
      rd1=`date -u -d "${YYYY}${MM}${DD} ${RR} -3 hours" +%Y%m%d%H`
      rd2=`date -u -d "${YYYY}${MM}${DD} ${RR} +3 hours" +%Y%m%d%H`
      filelist="BUFR0001${rd1}.DAT BUFR0001${rd2}.DAT"
      ;;
  esac

# Filter the BUFR files for dataCategory
  for file in $filelist ; do
    if    [ -f ${OBS_PATH}/${file} ]  ; then  cp -f  ${OBS_PATH}/${file}  .
    else  ERR_CODE=A-110  ; InfoAbort  ${ERR_CODE}  ;  fi

    for obstype in $OBSTYPES ; do
      case $obstype in
        synop ) CATS="0 1" ; TYPE=dataCategory ;;
        amdar ) CATS="142 144 146" ; TYPE=dataSubCategory ;;
        temp  ) CATS="101 102 109" ; TYPE=dataSubCategory ;;
        gpssol) CATS="110" ; TYPE=dataSubCategory ;;
        *) echo "Unknown observation type $obstype" 
           exit 1 ;;
      esac
      for cat in $CATS ; do
        bufr_copy -w ${TYPE}=$cat $file ${file}_${obstype}_${cat} &
      done
    done
  done
  wait

  for obstype in $OBSTYPES ; do
    cat *_${obstype}_* >> ${obstype}_${RUNDATE}00.bufr
    rm *_${obstype}_*
  done
else  # DELAYED MODE, GET DATA FROM ARCHIVE 
  case $OBS_SOURCE in
    mars|MARS ) 
      for obstype in $OBSTYPES ; do GetMarsObs ${obstype} ${RUNDATE} 3 ; done
      ;;
    gts|GTS|rmi|RMI )
      for obstype in $OBSTYPES ; do GetRmiObs ${obstype} ${RUNDATE}  ; done
      ;;
    ecfs|ECFS )
      for obstype in $OBSTYPES ; do ecp ${OBS_PATH_ARCHIVE}/${obstype}_${RUNDATE}00.bufr . ; done
      ;;
    arch|ARCH )
      for obstype in $OBSTYPES ; do cp ${OBS_PATH_ARCHIVE}/${obstype}_${RUNDATE}00.bufr . ; done
      ;;
    * )
      ERR_CODE=A-108 ;   InfoAbort    ${ERR_CODE}
      ;;
  esac
fi

@include <tail.h>



